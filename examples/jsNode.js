require('./format'); const fs = require('fs'); const { argv, env } = require('process'); const { rewrite, rootPath, fileType } = getArgv(); const packer = new Packer(); recursionFolder(rootPath); function getArgv() { let rewrite = false; let rootPath = env.PWD; let fileType = 'html'; argv.slice(2).forEach(val => { val === '-rwr' && (rewrite = true); val.startsWith('-dir=') && (rootPath = val.split('=')[1]); val.startsWith('-type=') && (fileType = val.split('=')[1]) })return { rewrite, rootPath, fileType } } function recursionFolder(dirPath) { fs.readdir(dirPath, (error, files) => { for (let i = 0; i < files?.length; i++) { const name = `${dirPath}/${files[i]}`; fs.stat(name, (err, content) => { const flag = content.isDirectory(); if (flag) { recursionFolder(name) } else { compressFile(name) } }) } }) } function compressFile(name) { if (name === argv[1]) return; if (name.substring(name.length - fileType.length) !== fileType) return; const data = fs.readFileSync(name); const output = packer.pack(data, 0, 0); const newFilePath = rewrite ? name : `${name.substring(0, name.length - fileType.length - 1)}.min.${fileType}`; fs.writeFile(newFilePath, output, (e) => { if (e) throw e; }) }